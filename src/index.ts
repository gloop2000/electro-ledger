import { app, BrowserWindow, ipcMain } from "electron";
import { Database } from "sqlite3";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // IPC
  ipcMain.handle("ping", async () => {
    console.log("ping recieved at main process");
    return "pong";
  });

  // Open DB
  const db = new Database("./public/database.db", (err) => {
    if (err) {
      console.error("Error opening database: ", err.message);
    } else {
      console.log("Database opened successfully");
    }
  });

  // Create user
  ipcMain.handle("add-user", async (event, user) => {
    console.log("Adding user:", user);
    const { username, email } = user;

    console.log("inserting user into db");

    db.run(
      `INSERT INTO users (username, email) VALUES (?, ?)`,
      [username, email],
      (err) => {
        if (err) {
          console.error("Error adding user:", err.message);
        } else {
          console.log("inserted user into db");
        }
      }
    );
  });

  // Expose function to query all user details
  ipcMain.handle("get-all-users", async () => {
    return new Promise((resolve, reject) => {
      db.all("SELECT * FROM users", (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
